  # This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven


  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    steps:
  - uses: actions/checkout@v4
  - uses: actions/setup-java@v3
    with:
      java-version: '17'
      distribution: 'temurin'
  - run: mvn --batch-mode --update-snapshots verify
  - run: mkdir staging && cp target/*.jar staging
  - uses: actions/upload-artifact@v3
    with:
      name: Package
      path: staging

       

  Clone repositorys with git:
  runs-on: ubuntu-latest

    steps:
    - name: clone repositorys with git
      uses: appleboy/ssh-action@master
      with:
        HOST: ${{ secrets.ip}}
        USERNAME: ${{ secrets.usuario}}
        PORT: ${{ secrets.porta}}
        KEY: ${{ secrets.chave}}
        script: |
            cd ./repo/api/api-preco-acoes
            sudo git pull origin
  Executing remote command:

    runs-on: ubuntu-latest

    steps:
  
    - name: Executing remote command
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.ip}}
        USERNAME: ${{ secrets.usuario}}
        PORT: ${{ secrets.porta}}
        KEY: ${{ secrets.chave}}
        script: |
            cd ./repo/api/api-preco-acoes
            sudo docker kill apir
            sudo docker rmi api
            sudo docker build . -t api
            sudo docker run --name apir -d --rm -p 80:80 api
            sudo docker logs apir